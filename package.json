{
  "name": "grunt-flexcombo",
  "description": "FlexCombo",
  "version": "0.1.22",
  "homepage": "",
  "author": {
    "name": "bachi",
    "email": "bachi@taobao.com"
  },
  "repository": {
    "type": "git",
    "url": "git://gitlab.alibaba-inc.com/trip/h5-test.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "jayli-server": "",
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "flex-combo": "",
    "jayli-server": "",
    "reverse-proxy": "~0.2.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readmeFilename": "README.md",
  "_id": "grunt-flexcombo@0.1.21",
  "_from": "grunt-flexcombo@",
  "readme": "# grunt-flexcombo\n\n![](http://gtms01.alicdn.com/tps/i1/T1TgNqFB0bXXbX25fJ-346-77.png)\n\n[flex-combo](https://npmjs.org/package/flex-combo)的grunt插件版本，[Grunt-Flexcombo 原理](https://speakerdeck.com/lijing00333/grunt-flexcombo)。\n\n## Getting Started\n\n依赖 Grunt 版本`~0.4.1`\n\n安装grunt-flexcombo\n\n```shell\nnpm install grunt-flexcombo --save-dev\n```\n\n安装后，在Gruntfile.js中载入任务\n\n```js\ngrunt.loadNpmTasks('grunt-flexcombo');\n```\n\n## \"flexcombo\" 任务配置\n\n在`grunt.initConfig()`中添加flexcombo的配置：\n\n```js\ngrunt.initConfig({\n\tflexcombo:{\n\t\tdebug:{\n\t\t\toptions: {\n\t\t\t\ttarget:'src',\n\t\t\t\turls:'/group/project',// 匹配[ag].tbcdn.cn时的访问路径\n\t\t\t\tport:'80',// flexcombo服务端口\n\t\t\t\tproxyport:'8080',// 反向代理服务端口\n\t\t\t\tservlet:'?',//开启combo的字符串\n\t\t\t\tseparator:',',//多文件分隔符\n\t\t\t\tcharset:'utf8',//默认输出文件的编码\n\t\t\t\tproxyHosts:['a.com','b.com'],//本地服务的域名\n\t\t\t\t// 过滤参数\n\t\t\t\tfilter:{ \n\t\t\t\t\t'-min\\\\.js':'.js',\n\t\t\t\t\t// 当访问a.com/go/act/demo.php时，实际请求\n\t\t\t\t\t// a.com/demo.html\n\t\t\t\t\t'/go/act/\\(.+\\\\.\\)php':'/$1html'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// flexcombo 需要配合 watch 模块一起使用\n\twatch: {\n\t\t'all': {\n\t\t\tfiles: ['src/**/*'],\n\t\t\ttasks: [ 'your-build-target' ]\n\t\t}\n\t}\n});\n\n// 注册 debug 任务\ngrunt.registerTask('debug', '开启debug模式', function() {\n\ttask.run(['flexcombo:debug','watch:all']);\n});\n```\n\n<strong>任务说明：</strong>\n\n`flexcombo`任务无法单独运行，需要配合`watch`启动。一份完整的[Gruntfile.js](https://github.com/jayli/slide/blob/master/Gruntfile.js)样例。\n\n<strong>启动服务：</strong>\n\n\tsudo grunt debug\n\n配置参数说明：\n\n#### options.target\n\n- 类型：String\n- 默认值：''\n\n基于此目录启用本地服务，类似Apache中的`DocumentRoot`，需写相对目录，相对于`Gruntfile.js`所在的目录。\n\n#### options.urls\n\n- 类型：String\n- 默认值：''\n\n启用本地服务后，访问到`options.target`目录对应的url里的路径，比如`options`的配置：\n\n\toptions:{\n\t\ttarget:'src'\n\t\turls:'/a/b/c'\n\t}\n\n访问URL`http://localhost/a/b/c/demo.html`，将返回`./src/demo.html`。此配置主要用作模拟cdn的真实路径，比如直接访问`http://g.tbcdn.cn/a/b/c/index.js`，将访问`./src/index.js`。\n\n#### options.port\n\n- 类型：String\n- 默认值：'80'\n\nflexcombo 服务的端口，默认启动在80端口，启动在80端口可以让你直接绑定Host到本机，若启动在其他端口，则只能用代理工具来辅助访问。\n\n#### options.proxyport\n\n- 类型：String\n- 默认值：'8080'\n\n反向代理服务器的端口。\n\n#### options.servlet\n\n- 类型：String\n- 默认：'?'\n\n开启combo的前缀。不同的开发环境有不同的combo需求。通过`servlet`,`seperator`两个参数决定。\n\n#### options.separator\n\n- 类型：String\n- 默认值：','\n\nCombo的url中多个文件的分隔符。\n\n#### options.charset\n\n- 类型：String\n- 默认：'utf8'\n\n默认输出文件的编码，主要用于约束输出assets文件的编码。\n\n#### options.proxyHosts\n\n- 类型：String 或者 Array\n- 默认：'' 或者 []\n\n本地服务自定义虚机的域名。除了`a.tbcdn.cn`和`g.tbcdn.cn`这两个默认域名，可以新增自定义域名配置，多个域名用数组表示。\n\n> 自定义域名无须配Host访问，只需配端口为`proxyport`的代理服务即可。\n\n注意：来自`proxyHosts`中配置的域名的url请求路径不会匹配`options.urls`，比如`proxyHosts:'a.com'`，那么访问\n\n\thttp://a.com/demo.html\n\n将访问本地文件`./src/demo.html`\n\n#### options.filter\n\n- 类型：Object\n- 默认值：`{}`\n\n`filter`可以用来过滤传入url。`filter`对象，其中`key`是匹配的正则表达式，`value`是替换的字符串，支持正则表达式变量。替换的顺序与定义无关。`filter`类似于Apache中的rewrite规则\n\n#### options.urlBasedCharset\n\n- 类型：Object\n- 默认值：`{}`\n\n`urlBasedCharset`可针对某一个url设置响应字符集。例如：\n\n    \"charset\" : \"utf-8\",\n\t\"urlBasedCharset\" : {\"/apps/aaa.js\":\"gbk\"}\n\n允许在大多数情况下返回字符集为utf-8字符集的资源。但在访问/apps/aaa.js的情况下，以gbk的方式编码。 这个特性多被用来引入编码几不同的第三方脚本。\n\noptions的更多配置请参照[flex-combo](https://npmjs.org/package/flex-combo)。\n\n### 服务启动\n\nflexcombo将在本地启动两个服务\n\n![](http://gtms01.alicdn.com/tps/i1/T1.ey8FnleXXcxFyEb-523-342.png)\n\n启动服务后，可以直接通过`localhost`来预览本地文件\n\n\thttp://localhost/group/project\n\n若要模拟真实环境调试，两种方法（二者取其一），推荐第二种：\n\n1. 将cdn配向开发机`127.0.0.1 g.tbcdn.cn a.tbcdn.cn`\n1. 将浏览器或者设备HTTP代理配置到本机的反向代理服务的端口\n\n比如在手机终端设置代理方法：\n\n![](http://gtms01.alicdn.com/tps/i1/T1bePRFlVXXXXhb4nD-502-341.png)\n\n### SSI\n\n该服务添加了[jayli-server](https://npmjs.org/package/jayli-server)，支持标准格式的 SSI include\n\n\t<!--#include path=\"../src/file-path.html\" -->\n\n## 使用案例1\n\n[KISSY 组件如何调试线上代码](http://blog.kissyui.com/2013/11/29/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%BA%BF%E8%B0%83%E5%BC%8F%E4%BD%A0%E7%9A%84gallery%E7%BB%84%E4%BB%B6/)\n\n## 使用案例2\n\nKISSY项目构建工具和本地环境：[generator-clam](https://npmjs.org/package/generator-clam)一同使用，构建工具生成本地配置文件，形如：\n\n\tflexcombo:{\n\t\tdebug:{\n\t\t\toptions:{\n\t\t\t\tproxyHosts:'trip.taobao.com',\n\t\t\t\ttarget:'build/',\n\t\t\t\tproxyport:8080,\n\t\t\t\turls:'/trip/proj/0.0.2',\n\t\t\t\tport:'80',\n\t\t\t\tservlet:'?',\n\t\t\t\tseparator:',',\n\t\t\t\tcharset:'utf8',\n\t\t\t\tfilter:{\n\t\t\t\t\t'-min\\\\.js':'.js',\n\t\t\t\t\t'/go/act/\\(.+\\\\.\\)php':'/$1html',\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n"
}
